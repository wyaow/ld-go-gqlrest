// Code generated by github.com/speedoops/gqlrest, DO NOT EDIT.

{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}
{{ reserveImport "net/http"  }}

{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}
{{ reserveImport "github.com/go-chi/chi/v5" }}
{{ reserveImport "github.com/speedoops/go-gqlrest/handlerx" }}

func RegisterHandlers(r *chi.Mux, srv http.Handler, prefix string) {
	// Mapping from `URL` to `GraphQL Operation`
	restOperation := make(handlerx.StringMap)
	// Mapping from `GraphQL Operation` to `Fields Selection`
	restSelection := make(handlerx.StringMap)
	// Mapping from `GraphQL Operation` to `Arguments <Name,Type>`
	restArguments := make(handlerx.ArgTypeMap)
	// Mapping from `GraphQL Operation` to `InputType <Name,Type>`
	restInputs := make(handlerx.ArgTypeMap)
	// Mapping from `Name` to `TypeKind`
	restTypes := make(handlerx.StringMap)

	{{ $root := . }}

	// Statistics: Queries={{ .QueryRoot.Fields | len }}, Mutations={{ .MutationRoot.Fields | len }}, Types={{ .Schema.Types | len }}, Inputs={{ .Inputs | len }} 

	// Part 1/4: Query Objects
	{
		{{ $object := .QueryRoot -}}
		{{ range $field := $object.Fields -}}
			{{- $prefix := slice $field.Name 0 2 -}}
			{{- $internal := eq $prefix "__" -}}
			{{- if not $internal -}}
			{ // {{ $field.Name }}
				{{ $url := getURL $field -}}
				{{ if $url -}}				
					{{ $method := getMethod $field "GET" -}}
					r.Method({{ $method }}, prefix + {{ $url }}, srv)

					restOperation[{{ $method }} + ":" + prefix + {{ $url }}] = "{{ $field.Name }}"
				{{ end -}}
				{{- $selection := getSelection $root.Objects $field false -}}
				restSelection["{{ $field.Name }}"] = "{{ $selection }}"

				methodArguments := make(handlerx.StringMap)	
				{{ range $arg := $field.Arguments -}}
					methodArguments["{{ $arg.Name }}"] = "{{ $arg.Type}}"
				{{ end -}}
				restArguments["{{ $field.Name }}"] = methodArguments
			}
			{{ end -}}
		{{ end }}
	}

	// Part 2/4: Mutation Objects
	{
		{{ $object := .MutationRoot -}}
		{{ range $field := $object.Fields -}}
			{{- $prefix := slice $field.Name 0 2 -}}
			{{- $internal := eq $prefix "__" -}}
			{{- if not $internal -}}
			{ // {{ $field.Name }}
				{{ $url := getURL $field -}}
				{{ if $url -}}
					{{ $method := getMethod $field "POST" -}}
					r.Method({{ $method }}, prefix + {{ $url }}, srv)
					
					restOperation[{{ $method }} + ":" + prefix + {{ $url }}] = "{{ $field.Name }}"
				{{ end -}}
				{{- $selection := getSelection $root.Objects $field false -}}
				restSelection["{{ $field.Name }}"] = "{{ $selection }}"

				methodArguments := make(handlerx.StringMap)
				{{ range $arg := $field.Arguments -}}
					methodArguments["{{ $arg.Name }}"] = "{{ $arg.Type}}"
				{{ end -}}
				restArguments["{{ $field.Name }}"] = methodArguments
			}
			{{ end -}}
		{{ end }}
	}

	// Part 3/4: User Defined Types
	{
		{{ range $name, $type := $root.Schema.Types -}}		
			{{ if not $type.BuiltIn -}}
				restTypes["{{ $name }}"] = "{{$type.Kind}}"
			{{ end -}}
		{{ end -}}
	}

	// Part 4/4: Input Objects
	{
		{{ range $object := $root.Inputs -}}
			{ // {{ $object.Name }}
				inputArguments := make(handlerx.StringMap)	
				{{ range $arg := $object.Fields -}}
					inputArguments["{{ $arg.Name }}"] = "{{ $arg.Type}}"
				{{ end -}}
				restInputs["{{ $object.Name }}"] = inputArguments
			}
		{{ end }}
	}

	handlerx.SetupHTTP2GraphQLMapping(restOperation, restSelection, restArguments, restInputs, restTypes)
}

